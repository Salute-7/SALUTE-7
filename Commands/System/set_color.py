import os
import json
import disnake
from utils.base.colors import colors
from disnake.ext import commands

bot = commands.InteractionBot(intents=disnake.Intents.all())

def load_base():
    config_path = os.path.join('utils/cache/configs', f'main.json')
    if os.path.exists(config_path):
        with open(config_path, 'r') as config_file:
            return json.load(config_file)

def load_config(guild_id):
    config_path = os.path.join('utils/cache/configs', f'{guild_id}.json')
    if os.path.exists(config_path):
        with open(config_path, 'r') as config_file:
            return json.load(config_file)
        try:
            with open(config_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {}
    return None

def create_embed(title, description, color):
    embed = disnake.Embed(title=title, description=description, color=color)
    return embed

def get_color_from_config(settings):
    color_choice = settings.get('COLOR', 'orange')
    return colors.get(color_choice.lower(), disnake.Color.orange())

async def check_permissions(guild_id, ctx):
    settings = load_config(guild_id)
    chosen_color = get_color_from_config(settings)

    def get_role_ids(role_key):
        return [
            int(role_id) for role_id in settings.get(role_key, [])
            if isinstance(role_id, (str, int)) and str(role_id).strip()
        ]
    
    ROLE_IDS_MODERATOR = get_role_ids('ROLE_MODER')
    ROLE_IDS_ADMIN = get_role_ids('ROLE_ADMIN')
    is_admin = ctx.author.guild_permissions.administrator
    has_role = any(
        role.id in ROLE_IDS_ADMIN or role.id in ROLE_IDS_MODERATOR 
        for role in ctx.author.roles)
    if not has_role and not is_admin:  
        await ctx.send(embed=create_embed(
            "",
            f"{base['ICON_PERMISSION']} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –í–∞—à–∏ –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã!",
            color=chosen_color),
            ephemeral=True)
        return False
    return True

base = load_base()

color_map = {
    'orange': disnake.Colour(0xFFA500),
    'red': disnake.Colour(0xFF0000),
    'green': disnake.Colour(0x008000),
    'blue': disnake.Colour(0x0000FF),
    'purple': disnake.Colour(0x800080),
    'yellow': disnake.Colour(0xFFFF00),
    'pink': disnake.Colour(0xFFC0CB),
    'cyan': disnake.Colour(0x00FFFF),
    'lime': disnake.Colour(0x00FF00),
    'brown': disnake.Colour(0xA52A2A),
    'grey': disnake.Colour(0x808080),
    'navy': disnake.Colour(0x000080),
    'teal': disnake.Colour(0x008080),
    'gold': disnake.Colour(0xFFD700),
    'salmon': disnake.Colour(0xFA8072),
    'orchid': disnake.Colour(0xDA70D6),
    'black': disnake.Colour(0x000000),
}

class ColorSelect(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–û—Ä–∞–Ω–∂–µ–≤—ã–π", value="orange"),
            disnake.SelectOption(label="–ö—Ä–∞—Å–Ω—ã–π", value="red"),
            disnake.SelectOption(label="–ó–µ–ª–µ–Ω—ã–π", value="green"),
            disnake.SelectOption(label="–°–∏–Ω–∏–π", value="blue"),
            disnake.SelectOption(label="–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", value="purple"),
            disnake.SelectOption(label="–ñ–µ–ª—Ç—ã–π", value="yellow"),
            disnake.SelectOption(label="–†–æ–∑–æ–≤—ã–π", value="pink"),
            disnake.SelectOption(label="–ì–æ–ª—É–±–æ–π", value="cyan"),
            disnake.SelectOption(label="–õ–∞–π–º", value="lime"),
            disnake.SelectOption(label="–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", value="brown"),
            disnake.SelectOption(label="–°–µ—Ä—ã–π", value="grey"),
            disnake.SelectOption(label="–ú–æ—Ä—Å–∫–æ–π", value="navy"),
            disnake.SelectOption(label="–ë–∏—Ä—é–∑–æ–≤—ã–π", value="teal"),
            disnake.SelectOption(label="–ó–æ–ª–æ—Ç–æ–π", value="gold"),
            disnake.SelectOption(label="–õ–æ—Å–æ—Å–µ–≤—ã–π", value="salmon"),
            disnake.SelectOption(label="–û—Ä—Ö–∏–¥–µ—è", value="orchid"),
            disnake.SelectOption(label="–ß—ë—Ä–Ω—ã–π", value="black"),
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç...", options=options)

    async def callback(self, interaction: disnake.MessageInteraction):
        guild_id = interaction.guild.id
        color_value = self.values[0]

        config_data = load_config(guild_id)
        config_data['COLOR'] = color_value.lower()
        
        with open(os.path.join('utils/cache/configs', f'{guild_id}.json'), 'w') as config_file:
            json.dump(config_data, config_file, indent=4)

        embed = create_embed(f"–¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color_value}.", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:"
                            "\n–õ–∞–π–º: lime"
                            "\n–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π: brown"
                            "\n–û—Ä–∞–Ω–∂–µ–≤—ã–π: orange"
                            "\n–ö—Ä–∞—Å–Ω—ã–π: red"
                            "\n–ó–µ–ª–µ–Ω—ã–π: green"
                            "\n–°–∏–Ω–∏–π: blue"
                            "\n–§–∏–æ–ª–µ—Ç–æ–≤—ã–π: purple"
                            "\n–ñ—ë–ª—Ç—ã–π: yellow"
                            "\n–°–µ—Ä—ã–π: grey"
                            "\n–ú–æ—Ä—Å–∫–æ–π: navy"
                            "\n–ë–∏—Ä—é–∑–æ–≤—ã–π: teal"
                            "\n–ó–æ–ª–æ—Ç–æ–π: gold"
                            "\n–õ–æ—Å–æ—Å–µ–≤—ã–π: salmon"
                            "\n–û—Ä—Ö–∏–¥–µ—è: orchid"
                            "\n–†–æ–∑–æ–≤—ã–π: pink"
                            "\n–ì–æ–ª—É–±–æ–π: cyan"
                            "\n–ß—ë—Ä–Ω—ã–π: black", color=color_map[color_value])
        await interaction.response.edit_message(embed=embed)  # –£–¥–∞–ª—è–µ–º –≤–∏–¥

class ColorDropdown(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(ColorSelect())

class set_color(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        print('–§–∞–π–ª Commands/Config/set_color.py –ó–∞–≥—Ä—É–∂–µ–Ω!')

    @commands.slash_command(name="set_color", description="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (üíª)")
    async def set_color(self, interaction: disnake.ApplicationCommandInteraction):

        guild_id = interaction.guild.id
        config_data = load_config(guild_id)
        chosen_color = get_color_from_config(config_data)
        view = ColorDropdown()

        embed=create_embed("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:",
                "\n–õ–∞–π–º: lime"
                "\n–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π: brown"
                "\n–û—Ä–∞–Ω–∂–µ–≤—ã–π: orange"
                "\n–ö—Ä–∞—Å–Ω—ã–π: red"
                "\n–ó–µ–ª–µ–Ω—ã–π: green"
                "\n–°–∏–Ω–∏–π: blue"
                "\n–§–∏–æ–ª–µ—Ç–æ–≤—ã–π: purple"
                "\n–ñ—ë–ª—Ç—ã–π: yellow"
                "\n–°–µ—Ä—ã–π: grey"
                "\n–ú–æ—Ä—Å–∫–æ–π: navy"
                "\n–ë–∏—Ä—é–∑–æ–≤—ã–π: teal"
                "\n–ó–æ–ª–æ—Ç–æ–π: gold"
                "\n–õ–æ—Å–æ—Å–µ–≤—ã–π: salmon"
                "\n–û—Ä—Ö–∏–¥–µ—è: orchid"
                "\n–†–æ–∑–æ–≤—ã–π: pink"
                "\n–ì–æ–ª—É–±–æ–π: cyan"
                "\n–ß—ë—Ä–Ω—ã–π: black", color=chosen_color)
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)